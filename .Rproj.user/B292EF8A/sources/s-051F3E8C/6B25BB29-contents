---
output:
  pdf_document:
    fig_caption: yes
    number_sections: yes
    keep_tex: yes
    dev: tikz
#bibliography: bibliography.bib
#csl: apa-5th-edition.csl
#csl: cambridge-journal-of-economics.csl
# documentclass: book
# classoption: twoside
geometry: 
    top = 25mm,
    left=25mm,
    right=25mm,
    bottom=25mm,
    paperwidth=170mm, 
    paperheight=240mm
urlcolor: blue
linkcolor: red
fontsize: 10pt
font-family: times
header-includes:
- \usepackage{placeins}
- \usepackage{fancyhdr}
- \usepackage{setspace}
- \onehalfspacing
- \usepackage{chngcntr}
#- \counterwithin{figure}{section}
#- \counterwithin{table}{section}
#- \counterwithin{equation}{section}
#- \counterwithin{footnote}{section}
#- \counterwithin{page}{section}
- \usepackage{subfig}
- \usepackage{float}
- \usepackage{lscape}
- \newcommand{\blandscape}{\begin{landscape}}
- \newcommand{\elandscape}{\end{landscape}}
- \renewcommand{\thepage}{(\thesection):\arabic{page}}
- \newcommand{\onlythepage}{\arabic{page}}
- \newcommand*{\secref}[1]{Section~\ref{#1}}
- \raggedbottom
# - \setlength\parskip{2.5em}
# - \pdfpagewidth 140mm
# - \pdfpageheight 170mm
---

```{r global_options, include=FALSE}

# This code adds all of the packages listed below to the namespace:
# =================================================================
# This is the same as using the "library" command.

sapply(c("reshape2", "xtable", "plotrix", "knitr", "plm", "tidyr", "dplyr", "eurostat",
         "tidyverse", "stringr", "rstudioapi", "ggplot2", "lubridate",
         "data.table", "statsDK", "date", "kableExtra",
         "readxl", "viridis", "fpp", "scales", "randomcoloR",
         "grid", "cowplot"), require, character.only = TRUE)

options(knitr.kable.NA = '', knitr.table.format = "latex")

#########################################################################
# Set knitr chunk options
#########################################################################

# These will be the defaults for all code chunks that you have in the 
# document. You can change these for each code chunk individually, 
# by simply adding the command with the alternative setting to the code
# chunk rules. i.e. the ```{r chunk-name, echo = FALSE, ... etc.} part.

opts_chunk$set(fig.path = 'figures/',
               echo = FALSE, 
               message = FALSE, 
               warning = FALSE, 
               fig.align = "center", 
               fig.width = 5,
               fig.pos = 'H',
               as.is = TRUE,
               include = TRUE,
               cache = TRUE)

```

```{r some_extra_chart_options}
#########################################################################
#########################################################################
# This section includes some additional code that makes writing a 
# document a little more user friendly.
#########################################################################
# 
# The first part includes some directory specifications, based on the 
# location that the user saves this file.
# =======================================
# 
# The second part includes a number of ggplot2 theme and colour palette
# modifications that can be modified for personal preference.
# ===========================================================
#  - The line-width for all line plots in the document
#  - Palettes with shades of red, black, blue for 4 5 and 6 variables
#  - A mixed colour palette of 10 colours for categorical variables
#  - Alternative legend placements inside the plotting area
#    (This saves a lot of space in the final document)
#  - Percentage formats that work with latex and ggplot2
#  - Simplified command to introduce dashed lines for 5 and 6 variables
#  - A theme adjustment to reduce font size in all plots
#  
#########################################################################
#########################################################################

#########################################################################
# Set active working directory to file location
# =============================================
# This line below is commented out, but can be really useful if you want
# to test out your code from the same location as this file is saved.
# 
# It will change your current session's working directory to the same
# folder. It must, however be commented out when you knit the final
# document - so best to just keep it commented out.
# 
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))


#########################################################################
#########################################################################
# Create some useful file paths
# 
# These require that you have a folder called "data" and one called 
# "images" in the same directory that this file is saved.
# 
currentwd <- (dirname(rstudioapi::getActiveDocumentContext()$path))
data_path <- file.path(currentwd, "data/")
image_path <- file.path(currentwd,"images/")


#########################################################################
#########################################################################
# Set up some extra features for plots that will be used later

plot_line_width = 0.85

#########################################################################
# Set colour palettes
#########################################################################

blackpalette <- c("0, 0, 0",
                  "125, 125, 125",
                  "75, 75, 75",
                  "225, 30, 0")
bluepalette <- c("0, 50, 130",
                 "0, 170, 255",
                 "0, 200, 255",
                 "0, 55, 255")
redpalette <- c("255, 45, 0",
                "255, 200, 0",
                "255, 155, 0",
                "255, 100, 0")

blackpalette_five <- c("0, 0, 0",
                       "185, 190, 200",
                       "115, 115, 115",
                       "75, 75, 75",
                       "225, 30, 0")
bluepalette_five <- c("0, 50, 130",
                      "0, 150, 255",
                      "0, 175, 255",
                      "0, 200, 255",
                      "0, 55, 255")
redpalette_five <- c("255, 45, 0",
                     "255, 200, 0",
                     "255, 175, 0",
                     "255, 145, 0",
                     "255, 100, 0")

blackpalette_six <- c("0, 50, 130",
                      "0, 0, 0",
                      "185, 190, 200",
                      "115, 115, 115",
                      "75, 75, 75",
                      "225, 30, 0")
bluepalette_six <- c("0, 50, 130",
                     "0, 100, 255",
                     "0, 130, 255",
                     "0, 165, 255",
                     "0, 200, 255",
                     "0, 55, 255")
redpalette_six <- c("255, 45, 0",
                    "255, 240, 0",
                    "255, 210, 0",
                    "255, 180, 0",
                    "255, 155, 0",
                    "255, 100, 0")

randompalette <- c("91, 163, 111",
                   "84, 135, 158",
                   "76, 99, 143",
                   "204, 157, 2",
                   "156, 0, 0",
                   "110, 99, 194",
                   "11, 132, 176",
                   "237, 133, 28",
                   "23, 87, 11",
                   "49, 163, 79")

blackpalette <- sapply(strsplit(blackpalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
bluepalette <- sapply(strsplit(bluepalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
redpalette <- sapply(strsplit(redpalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))

blackpalette_five <- sapply(strsplit(blackpalette_five, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
bluepalette_five <- sapply(strsplit(bluepalette_five, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
redpalette_five <- sapply(strsplit(redpalette_five, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))

blackpalette_six <- sapply(strsplit(blackpalette_six, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
bluepalette_six <- sapply(strsplit(bluepalette_six, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
redpalette_six <- sapply(strsplit(redpalette_six, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))

randompalette <- sapply(strsplit(randompalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))


#########################################################################
# Define random colours for plots and theme settings
#########################################################################

random_srv_palette <- c("91, 163, 111",
                        "84, 135, 158",
                        "156, 0, 0",
                        "204, 157, 2",
                        "110, 99, 194",
                        "11, 132, 176",
                        "76, 99, 143",
                        "237, 133, 28",
                        "23, 87, 11",
                        "11, 132, 176",
                        "49, 163, 79")
random_srv_palette <- sapply(strsplit(random_srv_palette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue = 255))

#########################################################################
# Set plot options
#########################################################################
# Create alternative legend placements inside the plots

legend_bottom_right_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                    legend.background = element_rect(colour = "white", size = 0.1),
                                    legend.key.size = unit(0.5, 'lines'),
                                    legend.justification=c(1,0), 
                                    legend.position=c(1,0))

legend_top_right_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                 legend.background = element_rect(colour = "white", size = 0.1),
                                 legend.key.size = unit(0.5, 'lines'),
                                 legend.justification=c(1,1), 
                                 legend.position=c(1,1))

legend_top_left_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                legend.background = element_rect(colour = "white", size = 0.1),
                                legend.key.size = unit(0.5, 'lines'),
                                legend.justification=c(0,1), 
                                legend.position=c(0,1))

legend_bottom_left_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                   legend.background = element_rect(colour = "white", size = 0.1),
                                   legend.key.size = unit(0.5, 'lines'),
                                   legend.justification=c(0,0), 
                                   legend.position=c(0,0))

#########################################################################
# Create percentage number format settings object for plots
#########################################################################
pct_scale_settings <- scales::percent_format(accuracy = NULL,
                                             scale = 100, 
                                             prefix = "", 
                                             suffix = "\\%",
                                             big.mark = " ", 
                                             decimal.mark = ".", 
                                             trim = TRUE)


#########################################################################
# Define dash types for plots
#########################################################################
#  0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash

plt_line_types_5 <- c("solid", "dashed", "dashed", "2222", "2222")
plt_line_types_6 <- c("solid", "dotdash", "dashed", "dashed", "2222", "2222")

#########################################################################
# Define additional plotting theme settings for server data
#########################################################################

theme_extra <- theme_minimal() +
    theme(text = element_text(size=8))+
    theme(axis.text.x = element_text(angle=90, vjust=0.5))
```

<!-- Remove the page number from the bottom of your title page -->

\pagenumbering{gobble}

<!-- ----------------------------Title Page---------------------------- -->
<!-- ----------------------------Title Page---------------------------- -->
<!-- ----------------------------Title Page---------------------------- -->

\begin{centering}

\vspace{2 cm}

\Large

{\bf Lecture 8}

\vspace{2 cm}

\Large
Statistics 1

\vspace{2 cm}

\normalsize


\vspace{2 cm}

\normalsize
Statistics lecture notes

`r format(Sys.time(), '%B %Y')`

\vspace{2 cm}

\normalsize
Aalborg University Business School

\vspace{2 cm}


\end{centering}

\newpage
<!-- ----------------------------End of title Page---------------------------- -->
<!-- ----------------------------End of title Page---------------------------- -->
<!-- ----------------------------End of title Page---------------------------- -->




<!-- Set the type of page - to allow for interesting headers and footers -->
<!-- Set the type of page - to allow for interesting headers and footers -->

\pagestyle{fancy}

<!-- Clear all of the positions of the headers and footers, LeftEven, RightOdd -->
<!-- Clear all of the positions of the headers and footers, LeftOdd, RightEven -->

\fancyhead[LE,RO]{}
\fancyhead[LO,RE]{}

<!-- Set a line below the header, and an invisible line above the footer -->
<!-- Set a line below the header, and an invisible line above the footer -->

\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0pt}

<!-- Set the page numbering type for the initial pages of your project -->
<!-- Abstract, table of contents, acknowledgements etc -->

\pagenumbering{roman}

<!-- Create a barrier to stop LaTeX items from floating up above this point -->
<!-- Then start a new page -->

\FloatBarrier
\newpage

<!-- 1. Set the header for the top of the page -->
<!-- 2. Create a section header, but remove the numbering, so that it just shows up as a section -->
<!-- 3. When you remove the section numbering in this way you have to add the section to the table of contents -->
<!-- There is another example in the chapters that is simpler, using the "# Header {-}" structure -->


<!-- 1. Again, stop items from floating above this point -->

<!-- 2. This time, the new page option is changed to "cleardoublepage" -->
<!-- This will ensure that the section starts on an odd page number (not necessary) -->
<!-- This is mostly useful if you are writing a book and you want (can just use \newpage)-->
<!-- the chapters all to show up on the right hand page -->

\FloatBarrier
\newpage        

<!-- Set the page header up above your table of contents -->

\fancyhead[CO,CE]{Table of Contents}

<!-- Set how deep you want the table of contents to go -->

\setcounter{tocdepth}{2}

<!-- Insert a table of contents at the beginning of the document -->
<!-- Insert a table of contents at the beginning of the document -->
\tableofcontents

\newpage
\FloatBarrier

<!-- Set the page header up above your first part -->

\fancyhead[CO,CE]{Part 2 header for page - change this}

<!-- Change the numbering to the standard arabic number set -->

\pagenumbering{arabic}

\FloatBarrier
\newpage

\fancyhead[CO,CE]{Part 2 header for page - change this, \onlythepage}

<!-- ---------------------Body text--------------------- -->
<!-- ---------------------Body text--------------------- -->
<!-- ---------------------Body text--------------------- -->

# Statistics lecture notes: Lecture 8

## finding specific Z values for different alpha values

Where $\alpha = 0.05$,  $\alpha = 0.025$, $\alpha = 0.005$.

Or, for a symetrical confidence interval, where $\alpha = 0.10$,  $\alpha = 0.05$, $\alpha = 0.01$, and we need to calculate $\frac{\alpha}{2}$.

$\frac{\alpha}{2} = 0.05$,

$\frac{\alpha}{2} = 0.025$

$\frac{\alpha}{2} = 0.005$

```{r}
qnorm(1-0.05, mean = 0, sd=1) 
qnorm(1-0.025, mean = 0, sd=1)
qnorm(1-0.005, mean = 0, sd=1)
```


```{r}
set.seed(312)
y_samp <- data.table("Y" = sample(1:1000000, 800))
x_samp <- data.table("X" = rnorm (100000 , mean = 50 , sd = 5 ))

dat = data.table(x_samp, y_samp) %>%
  gather(key = Variable, value = Value)
```

```{r}
sample_means_bar_plot <- ggplot() + 
  geom_histogram(data = dat,
           mapping = aes(x = Value,
                      #colour = samp_mean,
                      # fill = Interest_Fixation,
                      )
           ) +
  labs(title = "Bar plot of sample means",x = "Sample mean", y = "(Occurances)") +
  facet_wrap(~Variable, scales = "free") +
  theme_extra +
  scale_fill_manual(values = random_srv_palette) +
  legend_top_right_inside +
  guides(fill = guide_legend(nrow = 5, 
                            byrow = FALSE,
                            title = "Mean values"))
sample_means_bar_plot
```



# Examples from the textbook

## Exercise 7.2 

```{r}
variable = data.table("Home_prices" = c(209, 256, 257, 275, 277, 278, 285, 306,327))
x <- variable$Home_prices
n <- length(x)
x_bar <- mean(x)
s <- sd(x)
se <- s/sqrt(n)
CI = 0.95
alpha = (1 - CI)
alpha_2 = alpha / 2
tscore <- qt(1-alpha_2, df = n-1)
ME <- tscore*se
```



```{r}
m + c(-ME,ME)
```

```{r}
t.test(x)
```

### Part (a)
```{r}
mean_x <- 
```


### Part (b)


### Part (c)

## Students t

Confidence intervals with a students-t distribution can be calculated as

$$
\bar{x} = ± t_{n-1, \frac{\alpha}{2}}\bigg(\frac{s}{\sqrt{n}}\bigg)
$$

Where the margin of error ME, is defined as:

$$
t_{n-1, \frac{\alpha}{2}}\bigg(\frac{s}{\sqrt{n}}\bigg)
$$

```{r}


n <- length(x)
x_bar <- mean(x)
s <- sd(x)
se <- s/sqrt(n)
CI = 0.95
alpha = (1 - CI)
alpha_2 = alpha / 2
tscore <- qt(1-alpha_2, df = n-1)
ME <- tscore*se

m + c(-ME,ME)

t.test(x)

```

## For population proportions

For proportional datasets, where your focus group makes up some percentage of the total population (and thus sample).

Note that when working with proportions we use the standard normal tables, for $Z$, rather than the student $t$.

$$
Z = \frac{\hat{p} - P}{\sqrt{\frac{P(1-P)}{n}}}
$$
Where, for large samples:

$$
\frac{\hat{p} - P}{\sqrt{\frac{P(1-P)}{n}}} \approx 
\frac{\hat{p} - P}{\sqrt{\frac{\hat{p}(1-\hat{p})}{n}}}
$$

$$
z_{\alpha/2} ± \sqrt{\frac{\hat{p}(1-\hat{p})}{n}}
$$



```{r}

```

# Old code to re-use from previous lectures

Everything below this point is from 

# Distributions of Sample Statistics

```{r, as.is = TRUE}
age=c(18, 19, 22, 21 )
```


```{r, as.is = TRUE}
samples <- combn(age, 2)
```

```{r, as.is = TRUE}
samp_mean <- colMeans(samples)
```


```{r, as.is = TRUE}
x=table(samp_mean)

x
```

```{r, as.is = TRUE}
prop.table(x)
```


```{r, as.is = TRUE}
proprtions_table <- data.table(prop.table(x))
```


```{r, as.is = TRUE}
sample_means_bar_plot <- ggplot() + 
  geom_bar(data = proprtions_table,
           stat = "identity",
           mapping = aes(x = samp_mean,
                         y = N,
                      fill = samp_mean
                      #colour = samp_mean,
                      # fill = Interest_Fixation,
                      )
           ) +
  labs(title = "Bar plot of sample means",x = "Sample mean", y = "(Occurances)") +
  #facet_wrap(~Interest_Fixation) +
  theme_extra +
  scale_fill_manual(values = random_srv_palette) +
  legend_top_right_inside +
  guides(fill = guide_legend(nrow = 5, 
                            byrow = FALSE,
                            title = "Mean values"))
sample_means_bar_plot
```

## Increasing the sample size

First we create a function for ggplot density plots. The function is of a dataframe that contains a variable called Mean, which is just all of the means of our samples as a single dimension dataframe - "df".

```{r, as.is = TRUE}
ggplot_density_plot <- function (df) {
  sample_means_1_bar_plot <- ggplot() +
    geom_histogram(data = df,
                   alpha = 0.4,
                   bins = 30,
             mapping = aes(x = Mean,
                           y = ..density..,
                           fill = "Proportional frequency"),
             col = "#c99a00",
             fill = "#c99a00") +
    geom_density(data = df,
                 alpha = 0.3,
             mapping = aes(x = Mean,
                           col = "Density line",
                           fill = "Area")) +
    scale_fill_manual(values = c("#058003")) +
    scale_colour_manual(values = c("#058003")) +
    labs(x = "Sample mean", y = "Proportional frequency") +
    theme_extra +
    legend_top_right_inside +
    guides(fill = guide_legend(nrow = 3,
                              byrow = FALSE,
                              title = "Mean values"),
           col = guide_legend(nrow = 3,
                              byrow = FALSE,
                              title = "Mean values"))
  return(sample_means_1_bar_plot)
}



ggplot_frequency_plot <- function (df, colourscheme = "#058003") {
  
  plot <- ggplot() +
    geom_histogram(data = df,
                   alpha = 0.5,
                   bins = 30,
             mapping = aes(x = X,
                           fill = "Frequecy",
                           col = "Frequency")) +
    scale_fill_manual(values = c(colourscheme)) +
    scale_colour_manual(values = c(colourscheme)) +
    labs(x = "Distribution of X", 
         y = "Frequency") +
    theme_extra +
    legend_top_right_inside +
    guides(fill = guide_legend(nrow = 3,
                              byrow = FALSE,
                              title = "Mean values"),
           col = guide_legend(nrow = 3,
                              byrow = FALSE,
                              title = "Mean values"))
  plot
  return(plot)
}



```


## Next we create a population

```{r, as.is = TRUE}
set.seed(312)
y=sample(1:30, 20)
```

## Next we create our first sample

### Using a sample size of 4

```{r, as.is = TRUE}
samp_1 <- combn(y, 4)
samp_1_m <- colMeans(samp_1) %>%
  data.table()
colnames(samp_1_m) <- c("Mean")
```

We then use our ggplot function on the data:

```{r, as.is = TRUE}
ggplot_density_plot(samp_1_m)

```

### Using a sample size of 10

```{r, as.is = TRUE}
samp_2 <- combn(y, 10)
samp_2_m <- colMeans(samp_2) %>%
  data.table()
colnames(samp_2_m) <- "Mean"
```

We then use our ggplot function on the data:
```{r, as.is = TRUE, fig.cap = "Histogram of distributions", fig.subcap=c("n = 4", "n = 10"), fig.width = 3, fig.asp = 1, out.width="0.5\\linewidth"}
ggplot_density_plot(samp_1_m)
ggplot_density_plot(samp_2_m)
```


```{r, as.is = TRUE}
print(mean(y))

print(mean(samp_1_m))

print(mean(samp_2_m))
```

# Central limit theorem

Create a variable, with a variety of distributions:

```{r, as.is = TRUE}
set.seed(213)
pop_1 <- data.table("X" = rnorm(n = 1000, mean=4.9, sd = 2.1))
pop_2 <- data.table("X" = rf(n = 1000, df1 = 10, df2 = 20))
pop_3 <- data.table("X" = runif(n = 1000, min = 1, max = 1000))

```



```{r, as.is = TRUE,fig.cap = "Plots of populations", fig.subcap=c("Random normal", "Right skewed", "Uniform"), fig.width = 3, fig.asp = 1, out.width="0.33\\linewidth"}

ggplot_frequency_plot(pop_1)
ggplot_frequency_plot(pop_2, colourscheme = "#edae49")
ggplot_frequency_plot(pop_3, colourscheme = "#2308bd")

```


```{r, as.is = TRUE}
x_samp5 = data.table("X" = replicate(1000, mean(sample(pop_1$X, size = 5, replace = T))))
y_samp5 = data.table("X" = replicate(1000, mean(sample(pop_2$X, size = 5, replace = T))))
z_samp5 = data.table("X" = replicate(1000, mean(sample(pop_3$X, size = 5, replace = T))))
```


```{r, as.is = TRUE}
print(mean(pop_1$X))
print(mean(pop_2$X))
print(mean(pop_3$X))

print(mean(x_samp5$X))
print(mean(y_samp5$X))
print(mean(z_samp5$X))
```

```{r, as.is = TRUE}


```

# Increasing the sample size to n = 15

```{r, as.is = TRUE}
x_samp15 = data.table("Mean" = replicate(1000, mean(sample(pop_1$X, size = 15, replace = T))))
y_samp15 = data.table("Mean" = replicate(1000, mean(sample(pop_2$X, size = 15, replace = T))))
z_samp15 = data.table("Mean" = replicate(1000, mean(sample(pop_3$X, size = 15, replace = T))))
```


```{r, as.is = TRUE, fig.cap = "Plots of samples with (n = 15)", fig.subcap=c("Random normal", "Right skewed", "Uniform"), fig.width = 3, fig.asp = 1, out.width="0.33\\linewidth"}
ggplot_density_plot(x_samp15)
ggplot_density_plot(y_samp15)
ggplot_density_plot(z_samp15)
```


# Increasing the sample size to n = 25

```{r, as.is = TRUE}
x_samp25 = replicate(1000, mean(sample(pop_1, size = 25, replace = T)))
y_samp25 = replicate(1000, mean(sample(pop_2, size = 25, replace = T)))
z_samp25 = replicate(1000, mean(sample(pop_3, size = 25, replace = T)))
```

```{r, as.is = TRUE}

```
# Increasing the number of samples to 25000, for sample size n = 5

```{r, as.is = TRUE}
x_samp5_25000 = replicate(25000, mean(sample(pop_1, size = 5, replace = T)))
y_samp5_25000 = replicate(25000, mean(sample(pop_2, size = 5, replace = T)))
z_samp5_25000 = replicate(25000, mean(sample(pop_3, size = 5, replace = T)))
```

```{r, as.is = TRUE}

```

# Increasing the number of samples to 250, for sample size n = 100

```{r, as.is = TRUE}
x_samp100_250 = replicate(n = 250, mean(sample(pop_1, size = 100, replace = T)))
y_samp100_250 = replicate(n = 250, mean(sample(pop_2, size = 100, replace = T)))
z_samp100_250 = replicate(n = 250, mean(sample(pop_3, size = 100, replace = T)))
```

```{r, as.is = TRUE}

```

# Acceptance intervals

Did the random sample come from the population? AND

Is the sample a reflection of the population characteristics?

```{r, as.is = TRUE}
# A 5 % probability that the 
qnorm(1-0.05, mean = 0, sd=1)

qnorm(1-0.025, mean = 0, sd=1)

qnorm(1-0.005, mean = 0, sd=1)
```

# Distribution of variances

```{r, as.is = TRUE}
pop <- rnorm (100000 , mean = 50 , sd = 5 )
variances <- replicate (5000 , var (sample (pop, 10 )))
# hist (variances, prob=TRUE, col="skyblue", breaks = 20)
# lines(density(variances), lwd=2, col="red")
```


```{r, as.is = TRUE}
n = 15
std_dev = 5
pop <- rnorm (100000 , mean = 50 , sd = std_dev)
variances <- replicate (30 , var (sample (pop, n)))

var_population <- var(pop)
# alternatively:
# var_population = std^2

standardised_variances <- variances * (n - 1) / var_population

# hist (variances, prob=TRUE, col="skyblue", breaks = 20)
# lines(density(variances), lwd=2, col="red")

```

```{r, as.is = TRUE}
# hist (standardised_sample_variances, prob=TRUE, col="skyblue", breaks = 20)
# lines(density(standardised_sample_variances), lwd=2, col="red")
```

```{r, as.is = TRUE}
n = 150
df = n-1
pop <- rnorm (100000 , mean = 50 , sd = 5 )
variances <- replicate (30 , var (sample (pop, n)))
var_population <- var(pop)
standardised_sample_variances <- (variances*df) / var_population

# hist (variances, prob=TRUE, col="skyblue", breaks = 20)
# lines(density(variances), lwd=2, col="red")
```


```{r, as.is = TRUE}
# hist (standardised_sample_variances, prob=TRUE, col="skyblue", breaks = 20)
# lines(density(standardised_sample_variances), lwd=2, col="red")
```

# Exercises

```{r, as.is = TRUE}
#population <- rf(n = 1000, df1 = 10, df2 = 20)
#population <- rnorm(n = 5000, mean=25, sd = 8)
#population <- sample(1:1000000, size = 100000, replace = TRUE)
 
set.seed(213)
population <- rnorm(1e+05, mean = 5, sd = 5)
# This is part 

n = 30
sample_variances <- replicate(1000, var(sample(population, size = n, replace = T)))

# hist (sample_variances, prob=TRUE, col="skyblue", breaks = 20)
# lines(density(sample_variances), lwd=2, col="red")
```


```{r, as.is = TRUE}
# Calculate the degrees of freedom
df = n - 1

# Calculate the variance of the population (var)
var_population <- var(population)
```

## Question 5

Plot the distribution of the normalised sample variances:

$$\frac{s^2(n - 1)}{\sigma^2}$$

The plot below includes the $\chi^2$ distribution for 29 degrees of freedom.
When you plot the $\chi$ distribution you can specify the interval over which you want to plot it.

Since most of the standardised variances are between 10 and 50, I have specified from = 10, and to = 50 below.

```{r, as.is = TRUE}
# Calculate the standardised variances of the samples (i.e. many samples)
standardised_sample_variances <- (sample_variances*df) / var_population

# # PLot the standardised variances
# hist(standardised_sample_variances, prob=TRUE, col="skyblue", breaks = 20)
# #lines(density(standardised_sample_variances), lwd=2, col="red")
# curve(dchisq(x, df = df), from = 10, to = 50, add = TRUE)

```

## Examples of Chi-squared distributions with different df's

```{r, as.is = TRUE}
curve(dchisq(x, df = 5), from = 0, to = 100, add = TRUE)
curve(dchisq(x, df = 10), from = 0, to = 100, add = TRUE)
curve(dchisq(x, df = 15), from = 0, to = 100, add = TRUE)
curve(dchisq(x, df = 20), from = 0, to = 100, add = TRUE)
curve(dchisq(x, df = 30), from = 0, to = 100, add = TRUE)
curve(dchisq(x, df = 50), from = 0, to = 100, add = TRUE)
curve(dchisq(x, df = 60), from = 0, to = 100, add = TRUE)
curve(dchisq(x, df = 90), from = 0, to = 100, add = TRUE)
```


## Question 6 

For the degrees of freedom that you have calculated, what is the chi-square value at
the lower 0.01 interval and the upper 0.05 interval.

$df = (n - 1)$ = `df`




# Conclusions


<!-----------------------End of Body text--------------------- -->
<!-----------------------End of Body text--------------------- -->
<!-----------------------End of Body text--------------------- -->

\FloatBarrier
\cleardoublepage

<!-- Change the type of numbering for the lists -->
<!-- Change the type of numbering for the lists -->

\pagenumbering{roman}

<!-- Add a list of all figures -->
<!-- Add a list of all figures -->

\fancyhead[LO,RE]{}
\fancyhead[CO,CE]{List of Figures, \onlythepage}

\listoffigures
\addcontentsline{toc}{section}{List of Figures}

<!-- Add a list of all tables -->
<!-- Add a list of all tables -->

\FloatBarrier
\newpage

\fancyhead[CO,CE]{List of Tables, \onlythepage}

\listoftables
\addcontentsline{toc}{section}{List of Tables}

<!-- Insert your list of references -->
<!-- Insert your list of references -->

\newpage
\FloatBarrier

\newpage
\fancyhead[CO,CE]{References, \onlythepage}

# References



