---
output:
  pdf_document:
    fig_caption: yes
    number_sections: yes
    keep_tex: yes
    dev: tikz
#bibliography: bibliography.bib
#csl: apa-5th-edition.csl
#csl: cambridge-journal-of-economics.csl
# documentclass: book
# classoption: twoside
geometry: 
    top = 25mm,
    left=25mm,
    right=25mm,
    bottom=25mm,
    paperwidth=170mm, 
    paperheight=240mm
urlcolor: blue
linkcolor: red
fontsize: 10pt
font-family: times
header-includes:
- \usepackage{placeins}
- \usepackage{fancyhdr}
- \usepackage{setspace}
- \onehalfspacing
- \usepackage{chngcntr}
#- \counterwithin{figure}{section}
#- \counterwithin{table}{section}
#- \counterwithin{equation}{section}
#- \counterwithin{footnote}{section}
#- \counterwithin{page}{section}
- \usepackage{subfig}
- \usepackage{float}
- \usepackage{lscape}
- \newcommand{\blandscape}{\begin{landscape}}
- \newcommand{\elandscape}{\end{landscape}}
- \renewcommand{\thepage}{(\thesection):\arabic{page}}
- \newcommand{\onlythepage}{\arabic{page}}
- \newcommand*{\secref}[1]{Section~\ref{#1}}
- \raggedbottom
# - \setlength\parskip{2.5em}
# - \pdfpagewidth 140mm
# - \pdfpageheight 170mm
---

```{r global_options, include=FALSE}

# This code adds all of the packages listed below to the namespace:
# =================================================================
# This is the same as using the "library" command.

sapply(c("reshape2", "xtable", "plotrix", "knitr", "plm", "tidyr", "dplyr", "eurostat",
         "tidyverse", "stringr", "rstudioapi", "ggplot2", "lubridate",
         "data.table", "statsDK", "date", "kableExtra",
         "readxl", "viridis", "fpp", "scales", "randomcoloR",
         "grid", "cowplot"), require, character.only = TRUE)

options(knitr.kable.NA = '', knitr.table.format = "latex")

#########################################################################
# Set knitr chunk options
#########################################################################

# These will be the defaults for all code chunks that you have in the 
# document. You can change these for each code chunk individually, 
# by simply adding the command with the alternative setting to the code
# chunk rules. i.e. the ```{r chunk-name, echo = FALSE, ... etc.} part.

opts_chunk$set(fig.path = 'figures/',
               echo = FALSE, 
               message = FALSE, 
               warning = FALSE, 
               fig.align = "center", 
               fig.width = 5,
               fig.pos = 'H',
               as.is = TRUE,
               include = TRUE,
               cache = TRUE)

```

```{r some_extra_chart_options}
#########################################################################
#########################################################################
# This section includes some additional code that makes writing a 
# document a little more user friendly.
#########################################################################
# 
# The first part includes some directory specifications, based on the 
# location that the user saves this file.
# =======================================
# 
# The second part includes a number of ggplot2 theme and colour palette
# modifications that can be modified for personal preference.
# ===========================================================
#  - The line-width for all line plots in the document
#  - Palettes with shades of red, black, blue for 4 5 and 6 variables
#  - A mixed colour palette of 10 colours for categorical variables
#  - Alternative legend placements inside the plotting area
#    (This saves a lot of space in the final document)
#  - Percentage formats that work with latex and ggplot2
#  - Simplified command to introduce dashed lines for 5 and 6 variables
#  - A theme adjustment to reduce font size in all plots
#  
#########################################################################
#########################################################################

#########################################################################
# Set active working directory to file location
# =============================================
# This line below is commented out, but can be really useful if you want
# to test out your code from the same location as this file is saved.
# 
# It will change your current session's working directory to the same
# folder. It must, however be commented out when you knit the final
# document - so best to just keep it commented out.
# 
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))


#########################################################################
#########################################################################
# Create some useful file paths
# 
# These require that you have a folder called "data" and one called 
# "images" in the same directory that this file is saved.
# 
currentwd <- (dirname(rstudioapi::getActiveDocumentContext()$path))
data_path <- file.path(currentwd, "data/")
image_path <- file.path(currentwd,"images/")


#########################################################################
#########################################################################
# Set up some extra features for plots that will be used later

plot_line_width = 0.85

#########################################################################
# Set colour palettes
#########################################################################

blackpalette <- c("0, 0, 0",
                  "125, 125, 125",
                  "75, 75, 75",
                  "225, 30, 0")
bluepalette <- c("0, 50, 130",
                 "0, 170, 255",
                 "0, 200, 255",
                 "0, 55, 255")
redpalette <- c("255, 45, 0",
                "255, 200, 0",
                "255, 155, 0",
                "255, 100, 0")

blackpalette_five <- c("0, 0, 0",
                       "185, 190, 200",
                       "115, 115, 115",
                       "75, 75, 75",
                       "225, 30, 0")
bluepalette_five <- c("0, 50, 130",
                      "0, 150, 255",
                      "0, 175, 255",
                      "0, 200, 255",
                      "0, 55, 255")
redpalette_five <- c("255, 45, 0",
                     "255, 200, 0",
                     "255, 175, 0",
                     "255, 145, 0",
                     "255, 100, 0")

blackpalette_six <- c("0, 50, 130",
                      "0, 0, 0",
                      "185, 190, 200",
                      "115, 115, 115",
                      "75, 75, 75",
                      "225, 30, 0")
bluepalette_six <- c("0, 50, 130",
                     "0, 100, 255",
                     "0, 130, 255",
                     "0, 165, 255",
                     "0, 200, 255",
                     "0, 55, 255")
redpalette_six <- c("255, 45, 0",
                    "255, 240, 0",
                    "255, 210, 0",
                    "255, 180, 0",
                    "255, 155, 0",
                    "255, 100, 0")

randompalette <- c("91, 163, 111",
                   "84, 135, 158",
                   "76, 99, 143",
                   "204, 157, 2",
                   "156, 0, 0",
                   "110, 99, 194",
                   "11, 132, 176",
                   "237, 133, 28",
                   "23, 87, 11",
                   "49, 163, 79")

blackpalette <- sapply(strsplit(blackpalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
bluepalette <- sapply(strsplit(bluepalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
redpalette <- sapply(strsplit(redpalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))

blackpalette_five <- sapply(strsplit(blackpalette_five, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
bluepalette_five <- sapply(strsplit(bluepalette_five, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
redpalette_five <- sapply(strsplit(redpalette_five, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))

blackpalette_six <- sapply(strsplit(blackpalette_six, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
bluepalette_six <- sapply(strsplit(bluepalette_six, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))
redpalette_six <- sapply(strsplit(redpalette_six, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))

randompalette <- sapply(strsplit(randompalette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue=255))


#########################################################################
# Define random colours for plots and theme settings
#########################################################################

random_srv_palette <- c("91, 163, 111",
                        "84, 135, 158",
                        "156, 0, 0",
                        "204, 157, 2",
                        "110, 99, 194",
                        "11, 132, 176",
                        "76, 99, 143",
                        "237, 133, 28",
                        "23, 87, 11",
                        "11, 132, 176",
                        "49, 163, 79")
random_srv_palette <- sapply(strsplit(random_srv_palette, ", "), function(x)
    rgb(x[1], x[2], x[3], maxColorValue = 255))

#########################################################################
# Set plot options
#########################################################################
# Create alternative legend placements inside the plots

legend_bottom_right_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                    legend.background = element_rect(colour = "white", size = 0.1),
                                    legend.key.size = unit(0.5, 'lines'),
                                    legend.justification=c(1,0), 
                                    legend.position=c(1,0))

legend_top_right_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                 legend.background = element_rect(colour = "white", size = 0.1),
                                 legend.key.size = unit(0.5, 'lines'),
                                 legend.justification=c(1,1), 
                                 legend.position=c(1,1))

legend_top_left_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                legend.background = element_rect(colour = "white", size = 0.1),
                                legend.key.size = unit(0.5, 'lines'),
                                legend.justification=c(0,1), 
                                legend.position=c(0,1))

legend_bottom_left_inside <- theme(legend.spacing = unit(0.02, "cm"),
                                   legend.background = element_rect(colour = "white", size = 0.1),
                                   legend.key.size = unit(0.5, 'lines'),
                                   legend.justification=c(0,0), 
                                   legend.position=c(0,0))

#########################################################################
# Create percentage number format settings object for plots
#########################################################################
pct_scale_settings <- scales::percent_format(accuracy = NULL,
                                             scale = 100, 
                                             prefix = "", 
                                             suffix = "\\%",
                                             big.mark = " ", 
                                             decimal.mark = ".", 
                                             trim = TRUE)


#########################################################################
# Define dash types for plots
#########################################################################
#  0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash

plt_line_types_5 <- c("solid", "dashed", "dashed", "2222", "2222")
plt_line_types_6 <- c("solid", "dotdash", "dashed", "dashed", "2222", "2222")

#########################################################################
# Define additional plotting theme settings for server data
#########################################################################

theme_extra <- theme_minimal() +
    theme(text = element_text(size=8))+
    theme(axis.text.x = element_text(angle=90, vjust=0.5))
```

<!-- Remove the page number from the bottom of your title page -->

\pagenumbering{gobble}

<!-- ----------------------------Title Page---------------------------- -->
<!-- ----------------------------Title Page---------------------------- -->
<!-- ----------------------------Title Page---------------------------- -->

\begin{centering}

\vspace{2 cm}

\Large

{\bf Lecture 5}

\vspace{2 cm}

\Large
Statistics 1

\vspace{2 cm}

\normalsize


\vspace{2 cm}

\normalsize
Statistics lecture notes

`r format(Sys.time(), '%B %Y')`

\vspace{2 cm}

\normalsize
Aalborg University Business School

\vspace{2 cm}


\end{centering}

\newpage
<!-- ----------------------------End of title Page---------------------------- -->
<!-- ----------------------------End of title Page---------------------------- -->
<!-- ----------------------------End of title Page---------------------------- -->




<!-- Set the type of page - to allow for interesting headers and footers -->
<!-- Set the type of page - to allow for interesting headers and footers -->

\pagestyle{fancy}

<!-- Clear all of the positions of the headers and footers, LeftEven, RightOdd -->
<!-- Clear all of the positions of the headers and footers, LeftOdd, RightEven -->

\fancyhead[LE,RO]{}
\fancyhead[LO,RE]{}

<!-- Set a line below the header, and an invisible line above the footer -->
<!-- Set a line below the header, and an invisible line above the footer -->

\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0pt}

<!-- Set the page numbering type for the initial pages of your project -->
<!-- Abstract, table of contents, acknowledgements etc -->

\pagenumbering{roman}

<!-- Create a barrier to stop LaTeX items from floating up above this point -->
<!-- Then start a new page -->

\FloatBarrier
\newpage

<!-- 1. Set the header for the top of the page -->
<!-- 2. Create a section header, but remove the numbering, so that it just shows up as a section -->
<!-- 3. When you remove the section numbering in this way you have to add the section to the table of contents -->
<!-- There is another example in the chapters that is simpler, using the "# Header {-}" structure -->


<!-- 1. Again, stop items from floating above this point -->

<!-- 2. This time, the new page option is changed to "cleardoublepage" -->
<!-- This will ensure that the section starts on an odd page number (not necessary) -->
<!-- This is mostly useful if you are writing a book and you want (can just use \newpage)-->
<!-- the chapters all to show up on the right hand page -->

\FloatBarrier
\newpage        

<!-- Set the page header up above your table of contents -->

\fancyhead[CO,CE]{Table of Contents}

<!-- Set how deep you want the table of contents to go -->

\setcounter{tocdepth}{2}

<!-- Insert a table of contents at the beginning of the document -->
<!-- Insert a table of contents at the beginning of the document -->
\tableofcontents

\newpage
\FloatBarrier

<!-- Set the page header up above your first part -->

\fancyhead[CO,CE]{Part 2 header for page - change this}

<!-- Change the numbering to the standard arabic number set -->

\pagenumbering{arabic}

\FloatBarrier
\newpage

\fancyhead[CO,CE]{Part 2 header for page - change this, \onlythepage}

<!-- ---------------------Body text--------------------- -->
<!-- ---------------------Body text--------------------- -->
<!-- ---------------------Body text--------------------- -->

# Statistics lecture notes

##  Probability of a Range Using a Cumulative Distribution Function

```{r data-prep}
 
x=seq(1, 1000, 1)
y=dunif(x, 0, 1000)
curve(dunif(x, 0, 1000), 
      from = 0, 
      to = 1000, 
      bty="n", 
      ylim=c(0.000, 0.0012))
```


## Probability of a Range Using a Cumulative Distribution Function
```{r}
punif(750,min=0,max=1000) - punif(250,min=0,max=1000)

curve(dunif(x, 250, 750), from = 0, to = 1000, bty="n")
```


##  Probability density function
```{r}
curve(dnorm(x,0,1), bty="n", xlim=c(-3,3)) 
x <- c(-2,seq(-2,2,0.01),2)
y <- c(0,dnorm(seq(-2,2,0.01)),0) 
polygon(x,y,col='skyblue')
```

## Uniform distribution:

```{r}
x=seq(1, 100, 1)

curve(dunif(x, 0, 100), from = 0, to = 100, bty="n", ylim=c(0, 0.012))
     
```

## Mean

```{r}
x=seq(1, 100, 1); 
curve(dunif(x, 0, 100), 
      from = 0, 
      to = 100, 
      bty="n", 
      ylim=c(0, 0.012))
```


# Continuous probability distribution

## Normal distribution

```{r}
curve(dnorm(x,0,1), bty="n", xlim=c(-3,3))
```


## Properties of the Normal Distribution:


Two normal distributions with same mean ($\mu$) and different standard deviation ($\sigma$):

```{r}
x <- seq(-6,6,length=500)
plot(x,
     dnorm(x,mean=0,sd=1),
     type = "l", 
     lty=1,
     lwd=3,
     col="blue") 
curve(dnorm(x,0,1.5),
      add=TRUE,lty=2,
      col="blue", 
      lwd=3)
```


Two normal distributions with different mean ($\mu$) and equal standard deviation ($\sigma$)
```{r}
x <- seq(-6,6,length=500)
plot(x,dnorm(x,
             mean=0,
             sd=1),
     type = "l",
     lty=1,
     lwd=3,
     col="blue") 
curve(dnorm(x,0.5,1),
      add=TRUE,
      lty=2,
      col="blue",
      lwd=3)
```


## Fancy 3D plots

```{r}
#install.packages("mnormt")
library(mnormt)
mu <- c(0,0);
x<-seq(-4,4,0.1);
sigma <- matrix(c(2,0,0,2),2,2) 
y<-seq(-4,4,0.1) 


f <- function(x,y){dmnorm(cbind(x,y), mu, sigma)}
z<-outer(x,y,f)

persp(x,y,z, 
      box=T, 
      ticktype="detailed", 
      theta=47, 
      phi=6, 
      expand = 0.65)
```

# The normal z-score

## Z-score for continuous variables

What is the probability associated with the area left to 1?

```{r}
pnorm(1, mean = 0, sd = 1) ## [1] 0.8413
```

What is the probability associated with the area left to -1?

```{r}
pnorm(-1, mean = 0, sd = 1) ## should give [1] 0.1587
```

What is the probability associated with the area left to mean $\mu$ = 0?

```{r}
pnorm(0, mean = 0, sd = 1) ## [1] 0.5
```

What is the probability associated with the area between +1 and -1?

```{r}
pnorm(1, mean = 0, sd = 1) - pnorm(-1, mean = 0, sd = 1) ## [1] 0.6827
```

What is the probability associated with the area between +2 and -2?

```{r}
pnorm(2, mean = 0, sd = 1) - pnorm(-2, mean = 0, sd = 1) ## [1] 0.9545
```


What is the probability associated with the area between +3 and -3?

```{r}
pnorm(3, mean = 0, sd = 1) - pnorm(-3, mean = 0, sd = 1) ## [1] 0.9973
```


# Plotting distributions with standard deviations (Jesper's code)

```{r}
N = 1000
X <- rnorm(N, mean = 2, sd = 2)
```

```{r}
x_low_2 <- 2 - 3*2
x_low_2

x_high_2 <- 2 + 3*2
x_high_2

dat_1 <- tibble(
    X = X
)
glimpse(dat_1)
```

```{r}
dat_1 %>% 
        ggplot() + 
            geom_density(aes(X)) + 
        geom_vline(xintercept =  x_low_2, color = "red") + 
        geom_vline(xintercept = x_high_2, color = "red")

```

```{r}
#### Returns on fictive stock 

    N = 1000 
    X <- rnorm(N, mean = 2, sd = 2)    

    hist(X)
```


```{r}
## 95 percent interval 
    x_low_99 <- 2 - 3*2
    x_low_99     

    x_high_99 <- 2 + 3*2    
    x_high_99

    ## data-frame 
    dat_2 <- tibble(
        X = X
    )
    glimpse(dat_2)
```


```{r}
dat_2 %>% 
        ggplot() + 
            geom_density(aes(X)) + 
        geom_vline(xintercept =  x_low_99, color = "red") + 
        geom_vline(xintercept = x_high_99, color = "red")
```





## Example data sourcing and manipulation

```{r dst-interestrates, as.is = TRUE, fig.cap = "House Prices: Denmark, Greece and Switzerland", fig.width = 5, fig.asp = 0.8}

#########################################################################
#########################################################################
# Collect data from different sources
#########################################################################
#########################################################################


#########################################################################
#########################################################################
# Danmarks statistik example
#########################################################################
#########################################################################

# This uses a package called statsDK

# Fetching interest rate data, and filter for mortgage products
#########################################################################
dk_mortgage_interest_raw_data <- data.table(sdk_retrieve_data(table_id = "DNRNURI", 
                                                              DATA = paste0(c("AL51EFFR", "AL51BIDS"),collapse = ","),
                                                              INDSEK = paste0(c("1400"),collapse = ","),
                                                              VALUTA = "z01", 
                                                              LØBETID1 = "ALLE",
                                                              RENTFIX = paste0(c("1A", "2A", "3A", "5A", "10A", "S10A"),collapse = ","),
                                                              LAANSTR = "ALLE",
                                                              Tid = "*")) %>%
    select(-c(VALUTA, LØBETID1, LAANSTR, INDSEK)) %>%
    #mutate(Value = str_replace_all(INDHOLD, pattern = "..", "")) %>%
    mutate(Value = as.double(INDHOLD, na.rm = TRUE)/100,
           RENTFIX = str_replace_all(RENTFIX, pattern = " - - ", "")) %>%
    mutate(RENTFIX = str_replace_all(RENTFIX, pattern = " - ", "")) %>%
    mutate(RENTFIX = str_replace_all(RENTFIX, pattern = "- ", "")) %>%
    mutate(RENTFIX = str_replace_all(RENTFIX, pattern = "Over 6 months and up to and including 1 year", "01 year")) %>%
    mutate(RENTFIX = str_replace_all(RENTFIX, pattern = "Over 1 year and up to and including 2 years", "02 year")) %>%
    mutate(RENTFIX = str_replace_all(RENTFIX, pattern = "Over 2 years and up to and including 3 years", "03 year")) %>%
    mutate(RENTFIX = str_replace_all(RENTFIX, pattern = "Over 3 years and up to and including 5 years", "05 year")) %>%
    mutate(RENTFIX = str_replace_all(RENTFIX, pattern = "Over 5 years and up to and including 10 years", "10 year")) %>%
    mutate(Interest_Fixation = str_replace_all(RENTFIX, pattern = "Over 10 years", "Fixed")) %>%
    mutate(Date = str_replace_all(TID, pattern = "M", "")) %>%
    mutate(Date = paste0(Date, "01")) %>%
    mutate(Date = as.Date(Date,format='%Y%m%d'))  %>%
    mutate(Interest_Fixation = factor(Interest_Fixation, order = TRUE, 
                                      levels = c("01 year",
                                                 "02 year",
                                                 "03 year", 
                                                 "05 year",
                                                 "10 year",
                                                 "Fixed"))) %>%
    select(-INDHOLD, -RENTFIX, -TID) %>%
    filter(!is.na(Value))




DK_yield_curves_rates <- dk_mortgage_interest_raw_data %>%
    filter(DATA != "Administration rate (per cent) (not indexed)",
           !is.na(Value)) %>%
    select(-DATA)




# Plot the data with GGPlot
#########################################################################
DK_rate_curves <- ggplot() +
    geom_line(data = DK_yield_curves_rates,
              mapping = aes(x = Date,
                            y = Value,
                            group = Interest_Fixation,
                            colour = Interest_Fixation),
              lwd = 0.5) +
    labs(x = "Interest fixation term", y = "Rate of interest",
         caption = "Source: Statistics Denmark (Danmarks Statistik), own calculations") +
    scale_colour_manual(values = randompalette) +
    #scale_colour_gradient(low = "#ffffff", high = "#050f80") +
    #facet_wrap(~Growth) +
    scale_y_continuous(labels = pct_scale_settings) +
    theme_extra +
    theme(legend.direction = "vertical",
          legend.box = "horizontal") +
    legend_top_right_inside +
    guides(col = guide_legend(nrow = 3, 
                              byrow = FALSE,
                              title = "Interest fixation"))
DK_rate_curves


DK_yield_curves <- ggplot() +
    geom_line(data = DK_yield_curves_rates %>%
              mutate(Date = as.numeric(paste0(year(Date), str_pad(sprintf("%.0f", month(Date)), width = 2, pad = 0, side = 'left')))),
             mapping = aes(x = Interest_Fixation,
                           y = Value,
                           group = Date,
                           colour = Date),
              lwd = 0.5) +
    labs(x = "Interest fixation term", y = "Yield curves",
    caption = "Source: Statistics Denmark (Danmarks Statistik), own calculations") +
    scale_colour_gradient(low = "#ffffff", high = "#050f80") +
    #facet_wrap(~Growth) +
    scale_y_continuous(labels = pct_scale_settings) +
    theme_extra +
    theme(legend.direction = "vertical",
          legend.box = "horizontal") +
    legend_top_left_inside +
    guides(col = guide_legend(nrow = 6,
                            byrow = FALSE,
                            title = "Date of yield curve"))

DK_yield_curves
```

## Plotted as histograms

```{r histogram-int-fix, as.is = TRUE, fig.cap = "Histogram plots of Interest fixation: Facet wrapped", fig.width = 5, fig.asp = 0.8}
histogram_plot_interest_rates <- ggplot() + 
  geom_histogram(data = DK_yield_curves_rates,
               mapping = aes(x = Value,
                      group = Interest_Fixation,
                      #colour = Interest_Fixation,
                      fill = Interest_Fixation,
                      ),
               bins = 100) +
  labs(title = "Histograms of Interest fixation",x = "Interest rate", y = "Density (Occurances)") +
  facet_wrap(~Interest_Fixation) +
  theme_extra +
  legend_top_right_inside +
  guides(fill = guide_legend(nrow = 3, 
                            byrow = FALSE,
                            title = "Interest fixation"))
histogram_plot_interest_rates
```

## Plotted as density plots: Facet wrapped

```{r density-int-fix-facet, as.is = TRUE, fig.cap = "Density plots of Interest fixation: Facet wrapped", fig.width = 10, fig.asp = 0.5}
density_plot_interest_rates <- ggplot() + 
  geom_density(data = DK_yield_curves_rates,
               mapping = aes(x = Value,
                      group = Interest_Fixation,
                      colour = Interest_Fixation,
                      fill = Interest_Fixation
                      )) +
  labs(title = "Density plots of Interest fixation",x = "Interest rate", y = "Density (Occurances)") +
  facet_wrap(~Interest_Fixation) +
  theme_extra +  # this is a custom command
  legend_top_right_inside + # this is a custom command
  scale_x_continuous(labels = pct_scale_settings)+
  guides(fill = guide_legend(nrow = 3, 
                            byrow = TRUE,
                            title = "Interest fixation"),
         col = FALSE)
density_plot_interest_rates
```

## Plotted as density plots: Overlayed

```{r density-int-fix-overlay, as.is = TRUE, fig.cap = "Density plots of interest fixation: Overlayed", fig.width = 5, fig.asp = 0.8}
density_plot_colourful_interest_rates <- ggplot() + 
        geom_density(data = DK_yield_curves_rates,
                     mapping = aes(x = Value,
                            group = Interest_Fixation,
                            colour = Interest_Fixation)) +
    labs(x = "Interest rate", y = "Density (Occurances)") +
    theme_extra +
    legend_top_right_inside +
    guides(col = guide_legend(nrow = 3, 
                              byrow = FALSE,
                              title = "Interest fixation"))
density_plot_colourful_interest_rates
```

## Normal Probability Plots from data: Facet wrapped

```{r norm-prob-int-fix-facet, as.is = TRUE, fig.cap = "Normal probability plots of interest fixation: Facet wrapped", fig.width = 10, fig.asp = 0.5}
normal_probability_plot_interest_rates <- ggplot() + 
  stat_qq(data = DK_yield_curves_rates,
                     mapping = aes(sample = Value,
                            group = Interest_Fixation,
                            colour = Interest_Fixation)) +
  stat_qq_line(data = DK_yield_curves_rates,
                     mapping = aes(sample = Value,
                            group = Interest_Fixation,
                            colour = Interest_Fixation)) +
  labs(title = "Normal probability plots of interest fixation: Facet wrapped",x = "Z values", y = "Density (Occurances)") +
  facet_wrap(~Interest_Fixation) +
  theme_extra +  # this is a custom command
  legend_top_right_inside + # this is a custom command
  scale_x_continuous(labels = pct_scale_settings)+
  guides(fill = guide_legend(nrow = 3, 
                            byrow = TRUE,
                            title = "Interest fixation"),
         col = FALSE)
normal_probability_plot_interest_rates
```

## Normal Probability Plots from data: Overlayed

```{r norm-prob-int-fix-overlay, as.is = TRUE, fig.cap = "Normal probability plots of interest fixation: Overlayed", fig.width = 8, fig.asp = 0.8}
normal_probability_plot_interest_rates <- ggplot() + 
  stat_qq(data = DK_yield_curves_rates,
                     mapping = aes(sample = Value,
                            group = Interest_Fixation,
                            colour = Interest_Fixation)) +
  stat_qq_line(data = DK_yield_curves_rates,
                     mapping = aes(sample = Value,
                            group = Interest_Fixation,
                            colour = Interest_Fixation)) +
  labs(title = "Normal probability plots of interest fixation: Overlayed",x = "Z values", y = "Density (Occurances)") +
  # facet_wrap(~Interest_Fixation) +
  theme_extra +  # this is a custom command
  legend_top_right_inside + # this is a custom command
  scale_x_continuous(labels = pct_scale_settings)+
  guides(fill = guide_legend(nrow = 3, 
                            byrow = TRUE,
                            title = "Interest fixation"),
         col = FALSE)
normal_probability_plot_interest_rates
```


\newpage

# Creating tables

## Printing cross-tables:

```{r, as.is = TRUE}
cross_table_data <- DK_yield_curves_rates
cross_table_data$Month <- month(ymd(DK_yield_curves_rates$Date))

# This doesn't really make sense
# It's just to give you the code to produce a cross table in landscape form
cross_table <- xtabs(~ cross_table_data$Interest_Fixation + cross_table_data$Month) # (this is by count)

prop_table <- addmargins(prop.table(cross_table))%>% 
  {. * 100} %>% 
  round(2)

landscape(knitr::kable(prop_table,
      booktabs = TRUE,
      caption = "Cross table of interest rates across months: How many entries per month",
      escape = F,
      longtable = T,
      align=c('l', 'r', 'r', 'r', 'r', 'r', 'r', 
              'r', 'r', 'r', 'r', 'r', 'r')) %>%
    kable_styling(latex_options = c("hold_position"),
                  font_size = 7, "latex"))

```

```{r, as.is = TRUE}
# Alternative Dplyr way to get the prop table - here you can choose your groupings
# This table also provides value weighted proportions

dplyr_prop_table <- cross_table_data %>%
  select(-Date) %>% # remove the "Date" column
  group_by(Month) %>%
  xtabs() %>% # create a cross table according to your groupings
  prop.table() %>% {. * 100} %>% # multiply all values by 100
  addmargins() %>% # Add margins to the table
  round(digits = 2) # round all values off to 2 decimal places

landscape(knitr::kable(dplyr_prop_table,
      booktabs = TRUE,
      caption = "Cross table of interest rates across months: Dplyr value weighted",
      escape = F,
      longtable = T,
      align=c('l', 'r', 'r', 'r', 'r', 'r', 'r', 
              'r', 'r', 'r', 'r', 'r', 'r')) %>%
    kable_styling(latex_options = c("hold_position"),
                  font_size = 7, "latex"))

```



## Table of all interest rate data

```{r, as.is = TRUE}
pre_created_table <- DK_yield_curves_rates %>%
  arrange(Interest_Fixation) %>%
  spread(key = Interest_Fixation, value = Value)

kable(pre_created_table,
      booktabs = TRUE,
      caption = "Table of interest rates over time",
      escape = F,
      longtable = T,
      align=c('l', 'r', 'r', 'r', 'r', 'r', 'r')) %>%
    kable_styling(latex_options = c("hold_position"),
                  font_size = 7)
```


# Conclusions


<!-----------------------End of Body text--------------------- -->
<!-----------------------End of Body text--------------------- -->
<!-----------------------End of Body text--------------------- -->

\FloatBarrier
\cleardoublepage

<!-- Change the type of numbering for the lists -->
<!-- Change the type of numbering for the lists -->

\pagenumbering{roman}

<!-- Add a list of all figures -->
<!-- Add a list of all figures -->

\fancyhead[LO,RE]{}
\fancyhead[CO,CE]{List of Figures, \onlythepage}

\listoffigures
\addcontentsline{toc}{section}{List of Figures}

<!-- Add a list of all tables -->
<!-- Add a list of all tables -->

\FloatBarrier
\newpage

\fancyhead[CO,CE]{List of Tables, \onlythepage}

\listoftables
\addcontentsline{toc}{section}{List of Tables}

<!-- Insert your list of references -->
<!-- Insert your list of references -->

\newpage
\FloatBarrier

\newpage
\fancyhead[CO,CE]{References, \onlythepage}

# References



